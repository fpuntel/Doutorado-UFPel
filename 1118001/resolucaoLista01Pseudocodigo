1 Seguindo as notações utilizadas para as listas duplamente encadeadas (com cabeça), escreve os algoritmos para:
### 1.1) Inserir um elemento x no fim da lista

INICIO
INSERE (H, x)
    SE llink(H) = rlink(H) = H ENTAO  // Lista está vazia
        rlink(x) = rlink(H)
        llink(x) = H
        rlink(H) = x
        llink(H) = x
    SENAO
        SE rlink(H) = H ENTAO
            rlink(llink(H)) <-  x
            rlink(x) <- H
            llink(x) <- llink(H)
            llink(H) <- x
        FIM-SE
    FIM-SE
     
### 1.2) Remover um elemento x do início da lista

INICIO
    SE llink(H) = rlink(H) = H ENTAO
        LISTA_VAZIA
    SENAO
        llink(rlink(rlink(H))) <- H
        rlink(H) <- rlink(rlink(H))
            
    FIM-SE
FIM

### 1.3) Remover um elemento x do fim da lista

INICIO
    SE llink(H) = rlink(H) = H ENTAO // Nenhum elemento na lista
        LISTA_VAZIA
    SENAO
        SE rlink(x) = H // Um elemento na lista
            H->rlink = H;
            H->llink = H;
        SENAO // Mais de um elemento na lista
            llink(llink(rlink(H))) <- H
            llink(H) = llink(llink(H))
        FIM-SE
    FIM-SE
FIM

###  1.4) Trocar as informações entre dois elementos da lista

FUNCAO trocaInformacoes(H, x, y)
// Considerado que serão trocados os elementos x e y.
// Somente os elementos serão trocados e não os ponteiros

    SE llink(H) = rlink(H) = H ENTAO // Nenhum elemento na lista
        LISTA_VAZIA
    SENAO
        temp = rlink(H)
        
        FAÇA
            SE key(temp) = x
                // ENCONTREI x
                temp2 = rlink(H)
                FAÇA
                    SE key(temp2) == y
                        // Encontrei os dois itens
                        aux = key(temp)
                        key(temp) = key(temp2)
                        key(temp2) = aux
                        // troca efetuada
                        RETORNA H // Assim que realizar a troca retorna o H
                    FIM-SE
                    temp2 = rlink(temp2)
                ENQUANTO(temp != H)        
            FIM-SE    
            temp = rlink(temp)
        ENQUANTO(temp != H)
        
        // Itens nao encontrados para realizar a troca
        LIBERA(temp)
        LIBERA(temp2)
    FIM-SE
FIMFUNCAO

###  2) Escreva um algoritmo, baseado no bubblesort para a ordenação das informações dos elementos de um lista duplamente encadeada (considere que a informação armazeada seja uma chave).

FUNCAO ORDENACAO(H, n, nElementos)

    SE llink(H) = rlink(H) = H ENTAO // Nenhum elemento na lista
        LISTA_VAZIA
    SENAO SE llink(H) = rlink(H) ENTAO
        LISTA_COM_SOMENTE_UM_ELEMENTO
        RETORNA
    SENAO
        
        i = 0
        ENQUANTO (i < (nElementos - 1))
            temp = rlink(H)
            temp2 = rlink(temp)
            j = 0
            
            ENQUANTO (j < (nElementos - 1))
                SE (key(temp) > key(temp2))
                    aux = key(temp)
                    key(temp) = key(temp2)
                    key(temp2) = aux
                FIM-SE
                temp = rlink(temp)
                temp2 = rlink(temp2)
                j = j + 1
            FIM-ENQUANTO
            i = i + 1
        FIM-ENQUANTO
    FIM-SE
FIM-FUNCAO

### 3) Modifique o algoritmo de inserção na lista duplamente encadeada do slide 27 de modo que a inserção seja feita sempre em rodem crescente do campo info(x)

FUNCAO INSEREORDENADO(H, x)
// Levando em consideração que a lista já está ordenada
// x eh uma estrutura com key, rlink e llink

    SE llink(H) = rlink(H) = H ENTAO  // Lista está vazia
        rlink(x) = rlink(H)
        llink(x) = H
        rlink(H) = x
        llink(H) = x
        
        RETORNA H;
    FIM-SE
    
    inseriu = 0 // Variavel utilizada para controle
    temp <- rlink(H)

    FAÇA
        SE key(temp) >= key(x) E inseriu = 0 ENTAO
            rlink(llink(temp)) = x;
            llink(x) = llink(temp)
            
            llink(temp) = x
            rlink(x) = temp
            
            inseriu = 1
        FIM-SE
        temp = rlink(temp)
    ENQUANTO (temp != H)

    // Caso nao inseriu o key(x) eh o maior e deve
    // ser inserido no fim
    SE inseriu = 0 ENTAO
        llink(rlink(H)) = x
        llink(x) = llink(H)
        
        rlink(x) = H
        llink(H) = x
        
        RETORNA H
    FIM-SE
    
    H = temp
    RETORNA H    
FIM-FUNCAO
